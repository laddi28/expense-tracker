const express = require('express');
const axios = require('axios');
const cron = require('node-cron');
const app = express();
const port = 3000;

app.use(express.json());

const strapiUrl = 'http://strapi.koders.in/api/expenses/';

// Fetch expenses from Strapi
const fetchExpenses = async () => {
  try {
    const response = await axios.get(strapiUrl);
    return response.data.data;
  } catch (error) {
    console.error('Error fetching expenses:', error);
    return [];
  }
};

// Update expense in Strapi
const updateExpense = async (id, updatedData) => {
  try {
    await axios.put(`${strapiUrl}${id}`, { data: updatedData });
  } catch (error) {
    console.error('Error updating expense:', error);
  }
};

// Increment amounts for recurring expenses
const updateRecurringExpenses = async () => {
  const expenses = await fetchExpenses();
  const today = new Date();

  expenses.forEach(expense => {
    const { id, attributes } = expense;
    const { Frequency, Amount, Base, Date } = attributes;
    let newAmount = Amount;

    switch (Frequency) {
      case 'Daily':
        newAmount += Base;
        break;
      case 'Weekly':
        if (today.getDay() === 1) newAmount += Base; // Assuming weekly updates on Mondays
        break;
      case 'Monthly':
        if (today.getDate() === 1) newAmount += Base;
        break;
      case 'Quarterly':
        if ([0, 3, 6, 9].includes(today.getMonth()) && today.getDate() === 1) newAmount += Base;
        break;
      case 'Yearly':
        if (today.getMonth() === 0 && today.getDate() === 1) newAmount += Base;
        break;
    }

    if (newAmount !== Amount) {
      updateExpense(id, { Amount: newAmount });
    }
  });
};

// Schedule the cron job to run daily
cron.schedule('0 0 * * *', () => {
  console.log('Running daily expense update...');
  updateRecurringExpenses();
});

// CRUD Endpoints
app.get('/expenses', async (req, res) => {
  try {
    const response = await axios.get(strapiUrl);
    res.json(response.data);
  } catch (error) {
    res.status(500).send('Error fetching expenses');
  }
});

app.post('/expenses', async (req, res) => {
  try {
    const response = await axios.post(strapiUrl, { data: req.body });
    res.json(response.data);
  } catch (error) {
    res.status(500).send('Error creating expense');
  }
});

app.put('/expenses/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const response = await axios.put(`${strapiUrl}${id}`, { data: req.body });
    res.json(response.data);
  } catch (error) {
    res.status(500).send('Error updating expense');
  }
});

app.delete('/expenses/:id', async (req, res) => {
  try {
    const { id } = req.params;
    await axios.delete(`${strapiUrl}${id}`);
    res.send('Expense deleted');
  } catch (error) {
    res.status(500).send('Error deleting expense');
  }
});

app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});
